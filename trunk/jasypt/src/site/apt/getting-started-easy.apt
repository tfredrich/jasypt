
  This is a brief Getting Started guide. For more complete information about 
  each class and its usage, please visit the JavaDoc documentation for 
  {{{/api/jasypt/apidocs}jasypt}}, 
  {{{api/jasypt-hibernate/apidocs}jasypt-hibernate}}
  and {{{api/jasypt-spring-security/apidocs}jasypt-spring-security}}.

Getting Started with JASYPT easy encryption tools

  Jasypt provides several <easy> encryption tools. These are classes which
  allow (with little or no configuration, and with no need of knowing what
  is happening "behind the scenes") the execution of some of the most common
  encryption tasks.
  
  These tools are:
  
      * <<org.jasypt.util.PasswordEncryptor>> which can be used to 
        both encrypt passwords when users sign up and check input passwords
        when users sign in.

----------------
...
PasswordEncryptor passwordEncryptor = new PasswordEncryptor();
String encryptedPassword = passwordEncryptor.encryptPassword(userPassword);
...
if (passwordEncryptor.checkPassword(inputPassword, encryptedPassword)) {
  // correct!
} else {
  // bad login!
}
...
----------------

  
      * <<org.jasypt.util.StrongPasswordEncryptor>> which implements
        much higher password security than PasswordEncryptor (at a higher computational
        cost), and also can be used to 
        both encrypt passwords when users sign up and check input passwords
        when users sign in.

----------------
...
StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();
String encryptedPassword = passwordEncryptor.encryptPassword(userPassword);
...
if (passwordEncryptor.checkPassword(inputPassword, encryptedPassword)) {
  // correct!
} else {
  // bad login!
}
...
----------------


      * <<org.jasypt.util.TextEncryptor>> which will allow the user to
        encrypt and decrypt text data using a normal-strength algorithm. In
        order to be able to encrypt and decrypt, this encryptor has to be
        set a password first.
        
----------------
...
TextEncryptor textEncryptor = new TextEncryptor();
textEncryptor.setPassword(myEncryptionPassword);
...
String myEncryptedText = textEncryptor.encrypt(myText);
...
String plainText = textEncryptor.decrypt(myEncryptedText);
...
----------------


      * <<org.jasypt.util.StrongTextEncryptor>> which will allow the user to
        encrypt and decrypt text data using a high-strength algorithm. 
        (you may need to download and install the {{{http://java.sun.com/javase/downloads}Java Cryptography 
        Extension (JCE) Unlimited Strength Jurisdiction Policy Files}} to use it).
        In order to be able to encrypt and decrypt, this encryptor has to be
        set a password first.
        
----------------
...
StrongTextEncryptor textEncryptor = new StrongTextEncryptor();
textEncryptor.setPassword(myEncryptionPassword);
...
String myEncryptedText = textEncryptor.encrypt(myText);
...
String plainText = textEncryptor.decrypt(myEncryptedText);
...
----------------

  
      * <<org.jasypt.util.MessageDigester>> which performs message digesting
        at a binary level, and which results are equivalent to the ones obtained
        from a <<<java.security.MessageDigest>>> object, although acting in a
        thread-safe way and implementing an interface more suitable for use
        in a bean-centric environment.

----------------
...
MessageDigester digester = new MessageDigester();
digester.setAlgorithm("SHA-1");
...
byte[] digest = digester.digest(message);
...
----------------
