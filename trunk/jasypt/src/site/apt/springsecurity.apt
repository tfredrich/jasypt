  -------
  Integrating Jasypt with Spring Security (Acegi Security) 
  -------

  If you want to know what jasypt can do to improve the security of your users'
  passwords in an acegi-enabled application, check the {{{faq.html}FAQ}} and
  also the article '{{{howtoencryptuserpasswords.html}How to encrypt user 
  passwords}}' guide.

Integrating Jasypt with Spring Security (Acegi)

  Jasypt provides an integration package, org.jasypt.springsecurity, which
  allows the integration of jasypt's powerful password encryption capabilities into 
  a Spring Security-enabled application. Once integrated, jasypt will
  be responsible for managing the check of users' passwords at sign in in
  a transparent way for the rest of the security framework.
  
  Password encryption is set up in Spring Security by injecting an
  object implementing the <<<org.acegisecurity.providers.encoding.PasswordEncoder>>>
  interface into your <<<AuthenticationProvider>>>.
  
  
  Jasypt provides two implementations of this <<<PasswordEncoder>>> interface:
  
      * <<org.jasypt.springsecurity.PasswordEncoder>>, which
        is used for uni-directional password encryption (recommended),
        and which can wrap either an <<org.jasypt.util.password.PasswordEncryptor>> or
        an <<org.jasypt.digest.StringDigester>> object.
      
      []
      
      * <<org.jasypt.springsecurity.PBEPasswordEncoder>>, which
        is used for bi-directional password encryption (not recommended),
        and which can wrap either an <<org.jasypt.util.text.TextEncryptor>> or
        an <<org.jasypt.encryption.pbe.StringEncryptor>> object.
	
  Please note that <password encryption should be uni-directional>, but
  bi-directional password encryption (this is, passwords which can be decrypted)
  is allowed in order to support some legacy and complex inter-application
  integration scenarios.


* org.jasypt.springsecurity.PasswordEncoder

  This <<<org.acegisecurity.providers.encoding.PasswordEncoder>>> 
  implementation can wrap either an <<org.jasypt.util.password.PasswordEncryptor>>
  implementation (<<<BasicPasswordEncryptor>>>, <<<StrongPasswordEncryptor>>>, 
  <<<ConfigurablePasswordEncryptor>>>,...) or an <<org.jasypt.digest.StringDigester>>
  implementation (<<<StandardStringDigester>>>,...). This means that all
  uni-directional encryption methods supported in jasypt can be integrated
  into ACEGI using this adapter.
  
  It can be used from your Spring XML resource files like this
  (for a <<<PasswordEncryptor>>>):
  
------------  
  ...
  <!-- Your application may use the PasswordEncryptor in several places, --> 
  <!-- like for example at new user sign-up.                             --> 
  <bean id="jasyptPasswordEncryptor" class="org.jasypt.util.password.StrongPasswordEncryptor" />
  ...
  ...
  <!-- This Spring Security-friendly PasswordEncoder implementation will -->
  <!-- wrap the PasswordEncryptor instance so that it can be used from   -->
  <!-- the security framework.                                           -->
  <bean id="passwordEncoder" class="org.jasypt.springsecurity.PasswordEncoder">
    <property name="passwordEncryptor">
      <ref bean="jasyptPasswordEncryptor" />
    </property>
  </bean>
  ...
  ...
  <!-- Your DaoAuthenticationProvider will then use it like with any     -->
  <!-- other implementation of the PasswordEncoder interface.            -->
  <bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
      <property name="userDetailsService" ref="userDetailsService"/>
      <property name="passwordEncoder">
        <ref bean="passwordEncoder" />
      </property>
  </bean>
  ...
------------  
  
  Or like this (for a <<<StringDigester>>>):
  
------------  
  ...
  <!-- Your application may use the StringDigester in several places,    --> 
  <!-- like for example at new user sign-up.                             --> 
  <bean id="jasyptStringDigester" class="org.jasypt.digest.StandardStringDigester" >
    <property name="algorithm" value="SHA-1" />
    <property name="iterations" value="100000" />
  </bean>
  ...
  ...
  <!-- This Spring Security-friendly PasswordEncoder implementation will -->
  <!-- wrap the StringDigester instance so that it can be used from      -->
  <!-- the security framework.                                           -->
  <bean id="passwordEncoder" class="org.jasypt.springsecurity.PasswordEncoder">
    <property name="stringDigester">
      <ref bean="jasyptStringDigester" />
    </property>
  </bean>
  ...
  ...
  <!-- Your DaoAuthenticationProvider will then use it like with any     -->
  <!-- other implementation of the PasswordEncoder interface.            -->
  <bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
      <property name="userDetailsService" ref="userDetailsService"/>
      <property name="passwordEncoder">
        <ref bean="passwordEncoder" />
      </property>
  </bean>
  ...
------------  
  

* org.jasypt.springsecurity.PBEPasswordEncoder

  This <<<org.acegisecurity.providers.encoding.PasswordEncoder>>> 
  implementation can wrap either an <<org.jasypt.util.text.TextEncryptor>>
  implementation (<<<BasicTextEncryptor>>>, <<<StrongTextEncryptor>>>,...)
  or an <<org.jasypt.encryption.pbe.PBEStringEncryptor>>
  implementation (<<<StandardPBEStringEncryptor>>>,...). This means that all
  bi-directional encryption methods supported in jasypt can be integrated
  into ACEGI using this adapter.
  
  It can be used from your Spring XML resource files like this
  (for a <<<TextEncryptor>>>):
  
------------  
  ...
  <!-- Your application may use the TextEncryptor in several places,     --> 
  <!-- like for example at new user sign-up.                             --> 
  <bean id="jasyptTextEncryptor" class="org.jasypt.util.text.StrongTextEncryptor" >
    <property name="password" value="myPassword" />
  </bean>
  ...
  ...
  <!-- This Spring Security-friendly PasswordEncoder implementation will -->
  <!-- wrap the TextEncryptor instance so that it can be used from       -->
  <!-- the security framework.                                           -->
  <bean id="passwordEncoder" class="org.jasypt.springsecurity.PBEPasswordEncoder">
    <property name="textEncryptor">
      <ref bean="jasyptTextEncryptor" />
    </property>
  </bean>
  ...
  ...
  <!-- Your DaoAuthenticationProvider will then use it like with any     -->
  <!-- other implementation of the PasswordEncoder interface.            -->
  <bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
      <property name="userDetailsService" ref="userDetailsService"/>
      <property name="passwordEncoder">
        <ref bean="passwordEncoder" />
      </property>
  </bean>
  ...
------------  
  
  Or like this (for a <<<PBEStringEncryptor>>>):
  
------------  
  ...
  <!-- Your application may use the PBEStringEncryptor in several places,--> 
  <!-- like for example at new user sign-up.                             --> 
  <bean id="jasyptPBEStringEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor" >
    <property name="algorithm" value="PBEWithMD5AndTripleDES" />
    <property name="password" value="myPassword" />
  </bean>
  ...
  ...
  <!-- This Spring Security-friendly PasswordEncoder implementation will -->
  <!-- wrap the PBEStringEncryptor instance so that it can be used from  -->
  <!-- the security framework.                                           -->
  <bean id="passwordEncoder" class="org.jasypt.springsecurity.PBEPasswordEncoder">
    <property name="pbeStringEncryptor">
      <ref bean="jasyptPBEStringEncryptor" />
    </property>
  </bean>
  ...
  ...
  <!-- Your DaoAuthenticationProvider will then use it like with any     -->
  <!-- other implementation of the PasswordEncoder interface.            -->
  <bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
      <property name="userDetailsService" ref="userDetailsService"/>
      <property name="passwordEncoder">
        <ref bean="passwordEncoder" />
      </property>
  </bean>
  ...
------------  
